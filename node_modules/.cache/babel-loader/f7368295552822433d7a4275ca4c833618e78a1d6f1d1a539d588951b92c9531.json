{"ast":null,"code":"var _jsxFileName = \"/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./styles.css\";\nimport React, { useState, useRef } from \"react\";\nimport InputContent from \"./components/InputContent\";\nimport Button from \"./components/Button\";\nimport OutputResult from \"./components/OutputResult\";\nimport logo from \"./constants/edicom-logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [firstContent, setFirstContent] = useState(\"\");\n  const [secondContent, setSecondContent] = useState(\"\");\n  const [fisrtFileName, setFirstFileName] = useState(\"\");\n  const [secondFileName, setSecondFileName] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const firstFileInputRef = useRef(null);\n  const secondFileInputRef = useRef(null);\n  const [action, setAction] = useState(\"encode\");\n  const handleCompare = () => {\n    if (firstContent === secondContent) {\n      setOutput(\"The contents are identical.\");\n    } else {\n      compareContents(\"/diffFormatter/compare\");\n    }\n  };\n  const handleClear = () => {\n    setFirstContent(\"\");\n    setSecondContent(\"\");\n    setFirstFileName(\"\");\n    setSecondFileName(\"\");\n    setOutput(\"\");\n    if (firstFileInputRef.current) {\n      firstFileInputRef.current.value = \"\";\n    }\n    if (secondFileInputRef.current) {\n      secondFileInputRef.current.value = \"\";\n    }\n  };\n  const compareContents = async () => {\n    try {\n      if (firstContent === \"\" || secondContent === \"\") {\n        setOutput(\"Contents cannot be emtpy.\");\n        return;\n      }\n      const response = await fetch(\"http://localhost:8080/diffFormatter/compare\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          firstContent: firstContent,\n          secondContent: secondContent\n        })\n      });\n      if (response.ok) {\n        const data = await response.text();\n        setOutput(data);\n      } else {\n        setOutput(\"Error occurred while fetching the response.\");\n      }\n    } catch (error) {\n      setOutput(`Fetch error: ${error.message}`);\n    }\n  };\n  const onBeautify = async () => {\n    try {\n      if (firstContent === \"\") {\n        setOutput(\"Fisrt content cannot be emtpy.\");\n      }\n      const response = await fetch(\"http://localhost:8080/diffFormatter/beautify\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: firstContent\n      });\n      if (response.ok) {\n        const data = await response.text();\n        setOutput(data);\n      } else {\n        setOutput(\"Error occurred while fetching the response.\");\n      }\n    } catch (error) {\n      setOutput(`Fetch error: ${error.message}`);\n    }\n  };\n  const handleBase64 = () => {\n    if (action === \"encode\") {\n      const encodedText = btoa(firstContent); // Using Base64 encoding for demo\n      setOutputText(encodedText);\n    } else if (action === \"decode\") {\n      try {\n        const decodedText = atob(firstContent); // Using Base64 decoding for demo\n        setOutputText(decodedText);\n      } catch (error) {\n        setOutputText(\"Error: Invalid encoding.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Logo\",\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"XML & JSON Comparison Tool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(InputContent, {\n      firstContent: firstContent,\n      secondContent: secondContent,\n      firstFileInputRef: firstFileInputRef,\n      secondFileInputRef: secondFileInputRef,\n      setFirstContent: setFirstContent,\n      setSecondContent: setSecondContent,\n      setFirstFileName: setFirstFileName,\n      setSecondFileName: setSecondFileName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClear: handleClear,\n      onBeautify: onBeautify,\n      handleCompare: handleCompare,\n      handleBase64: handleBase64,\n      action: action,\n      setAction: setAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OutputResult, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N4igNtJ1ZHIgOXfb7EOhKWm6U6w=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","InputContent","Button","OutputResult","logo","jsxDEV","_jsxDEV","App","_s","firstContent","setFirstContent","secondContent","setSecondContent","fisrtFileName","setFirstFileName","secondFileName","setSecondFileName","output","setOutput","firstFileInputRef","secondFileInputRef","action","setAction","handleCompare","compareContents","handleClear","current","value","response","fetch","method","headers","body","JSON","stringify","ok","data","text","error","message","onBeautify","handleBase64","encodedText","btoa","setOutputText","decodedText","atob","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/App.js"],"sourcesContent":["import \"./styles.css\";\nimport React, { useState, useRef} from \"react\";\nimport InputContent from \"./components/InputContent\";\nimport Button from \"./components/Button\";\nimport OutputResult from \"./components/OutputResult\";\nimport logo from \"./constants/edicom-logo.png\";\n\nexport default function App() {\n  const [firstContent, setFirstContent] = useState(\"\");\n  const [secondContent, setSecondContent] = useState(\"\");\n  const [fisrtFileName, setFirstFileName] = useState(\"\"); \n  const [secondFileName, setSecondFileName] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const firstFileInputRef = useRef(null);\n  const secondFileInputRef = useRef(null);\n  const [action, setAction] = useState(\"encode\");\n\n  const handleCompare = () => {\n    if (firstContent === secondContent) {\n      setOutput(\"The contents are identical.\");\n    } else {\n      compareContents(\"/diffFormatter/compare\");\n    }\n  };\n\n  const handleClear = () => {\n    setFirstContent(\"\");\n    setSecondContent(\"\");\n    setFirstFileName(\"\");\n    setSecondFileName(\"\");\n    setOutput(\"\");\n    if (firstFileInputRef.current) {\n      firstFileInputRef.current.value = \"\";\n    }\n    if (secondFileInputRef.current) {\n      secondFileInputRef.current.value = \"\";\n    }\n  };\n\nconst compareContents = async () => {\n  try{\n    if (firstContent === \"\" || secondContent === \"\"){\n      setOutput(\"Contents cannot be emtpy.\");\n      return;\n    }\n  const response = await fetch(\n    \"http://localhost:8080/diffFormatter/compare\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        firstContent: firstContent,\n        secondContent: secondContent,\n      }),\n    }\n  );\n  if (response.ok) {\n    const data = await response.text(); \n    setOutput(data);\n  } else {\n    setOutput(\"Error occurred while fetching the response.\");\n  }\n} catch (error) {\n  setOutput(`Fetch error: ${error.message}`);\n}\n};\n\nconst onBeautify = async () => {\n  try {\n    if (firstContent === \"\"){\n      setOutput(\"Fisrt content cannot be emtpy.\");\n    }\n  const response = await fetch(\n    \"http://localhost:8080/diffFormatter/beautify\",\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: firstContent\n    }\n  );\n  if (response.ok) {\n    const data = await response.text(); \n    setOutput(data);\n  } else {\n    setOutput(\"Error occurred while fetching the response.\");\n  }\n} catch (error) {\n  setOutput(`Fetch error: ${error.message}`);\n}\n};\n\nconst handleBase64 = () => {\n  if (action === \"encode\") {\n    const encodedText = btoa(firstContent); // Using Base64 encoding for demo\n    setOutputText(encodedText);\n  } else if (action === \"decode\") {\n    try {\n      const decodedText = atob(firstContent); // Using Base64 decoding for demo\n      setOutputText(decodedText);\n    } catch (error) {\n      setOutputText(\"Error: Invalid encoding.\");\n    }\n  }\n};\n\n  return (\n    <div className=\"App\">\n    <header className=\"header\">\n      <div className=\"logo-container\">\n        <img src={logo} alt=\"Logo\" className=\"logo\" />\n      </div>\n      <div className=\"title-container\">\n        <h1 className=\"title\">XML & JSON Comparison Tool</h1>\n      </div>\n    </header>\n      <InputContent firstContent={firstContent} secondContent={secondContent} firstFileInputRef={firstFileInputRef} secondFileInputRef={secondFileInputRef} setFirstContent={setFirstContent} \n      setSecondContent={setSecondContent} setFirstFileName={setFirstFileName} setSecondFileName={setSecondFileName}/>\n      <Button handleClear={handleClear} onBeautify={onBeautify} handleCompare={handleCompare} handleBase64={handleBase64} action={action} setAction={setAction}/>\n      <OutputResult output={output}/>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}