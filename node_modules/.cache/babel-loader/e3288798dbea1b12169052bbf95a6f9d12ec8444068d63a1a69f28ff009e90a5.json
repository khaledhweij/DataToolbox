{"ast":null,"code":"var _jsxFileName = \"/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/functions/HighlightedXMLDisplay.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HighlightedXMLDisplay = _ref => {\n  let {\n    xmlString\n  } = _ref;\n  // Step 1: Remove the <Highlight> tags and replace them with <span> elements\n  const parseAndHighlight = xmlString => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, 'text/xml');\n\n    // Create a recursive function to traverse nodes and replace <Highlight>\n    const traverseNodes = node => {\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        // If node is a <Highlight>, replace it with a span\n        if (node.nodeName === 'Highlight') {\n          const span = document.createElement('span');\n          span.style.backgroundColor = 'yellow';\n\n          // Move child nodes of <Highlight> into <span>\n          while (node.firstChild) {\n            span.appendChild(traverseNodes(node.firstChild));\n          }\n          return span;\n        }\n\n        // Traverse through child nodes for other elements\n        const element = document.createElement(node.nodeName);\n        for (const attr of node.attributes) {\n          element.setAttribute(attr.name, attr.value);\n        }\n        for (const childNode of node.childNodes) {\n          element.appendChild(traverseNodes(childNode));\n        }\n        return element;\n      } else if (node.nodeType === Node.TEXT_NODE) {\n        return document.createTextNode(node.nodeValue);\n      }\n      return node;\n    };\n    const newNode = traverseNodes(xmlDoc.documentElement);\n    return newNode.outerHTML;\n  };\n\n  // Step 2: Display the parsed XML with the span elements in place of <Highlight>\n  const highlightedXml = parseAndHighlight(xmlString);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Highlighted XML:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: highlightedXml\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_c = HighlightedXMLDisplay;\nexport default HighlightedXMLDisplay;\nvar _c;\n$RefreshReg$(_c, \"HighlightedXMLDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","HighlightedXMLDisplay","_ref","xmlString","parseAndHighlight","parser","DOMParser","xmlDoc","parseFromString","traverseNodes","node","nodeType","Node","ELEMENT_NODE","nodeName","span","document","createElement","style","backgroundColor","firstChild","appendChild","element","attr","attributes","setAttribute","name","value","childNode","childNodes","TEXT_NODE","createTextNode","nodeValue","newNode","documentElement","outerHTML","highlightedXml","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/functions/HighlightedXMLDisplay.js"],"sourcesContent":["import React from 'react';\n\nconst HighlightedXMLDisplay = ({ xmlString }) => {\n  // Step 1: Remove the <Highlight> tags and replace them with <span> elements\n  const parseAndHighlight = (xmlString) => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, 'text/xml');\n    \n    // Create a recursive function to traverse nodes and replace <Highlight>\n    const traverseNodes = (node) => {\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        // If node is a <Highlight>, replace it with a span\n        if (node.nodeName === 'Highlight') {\n          const span = document.createElement('span');\n          span.style.backgroundColor = 'yellow';\n\n          // Move child nodes of <Highlight> into <span>\n          while (node.firstChild) {\n            span.appendChild(traverseNodes(node.firstChild));\n          }\n          return span;\n        }\n\n        // Traverse through child nodes for other elements\n        const element = document.createElement(node.nodeName);\n        for (const attr of node.attributes) {\n          element.setAttribute(attr.name, attr.value);\n        }\n        for (const childNode of node.childNodes) {\n          element.appendChild(traverseNodes(childNode));\n        }\n        return element;\n      } else if (node.nodeType === Node.TEXT_NODE) {\n        return document.createTextNode(node.nodeValue);\n      }\n      return node;\n    };\n\n    const newNode = traverseNodes(xmlDoc.documentElement);\n    return newNode.outerHTML;\n  };\n\n  // Step 2: Display the parsed XML with the span elements in place of <Highlight>\n  const highlightedXml = parseAndHighlight(xmlString);\n\n  return (\n    <div>\n      <h3>Highlighted XML:</h3>\n      <div dangerouslySetInnerHTML={{ __html: highlightedXml }} />\n    </div>\n  );\n};\n\nexport default HighlightedXMLDisplay;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,qBAAqB,GAAGC,IAAA,IAAmB;EAAA,IAAlB;IAAEC;EAAU,CAAC,GAAAD,IAAA;EAC1C;EACA,MAAME,iBAAiB,GAAID,SAAS,IAAK;IACvC,MAAME,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;IAC9B,MAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACL,SAAS,EAAE,UAAU,CAAC;;IAE5D;IACA,MAAMM,aAAa,GAAIC,IAAI,IAAK;MAC9B,IAAIA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY,EAAE;QACvC;QACA,IAAIH,IAAI,CAACI,QAAQ,KAAK,WAAW,EAAE;UACjC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;UAC3CF,IAAI,CAACG,KAAK,CAACC,eAAe,GAAG,QAAQ;;UAErC;UACA,OAAOT,IAAI,CAACU,UAAU,EAAE;YACtBL,IAAI,CAACM,WAAW,CAACZ,aAAa,CAACC,IAAI,CAACU,UAAU,CAAC,CAAC;UAClD;UACA,OAAOL,IAAI;QACb;;QAEA;QACA,MAAMO,OAAO,GAAGN,QAAQ,CAACC,aAAa,CAACP,IAAI,CAACI,QAAQ,CAAC;QACrD,KAAK,MAAMS,IAAI,IAAIb,IAAI,CAACc,UAAU,EAAE;UAClCF,OAAO,CAACG,YAAY,CAACF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,KAAK,CAAC;QAC7C;QACA,KAAK,MAAMC,SAAS,IAAIlB,IAAI,CAACmB,UAAU,EAAE;UACvCP,OAAO,CAACD,WAAW,CAACZ,aAAa,CAACmB,SAAS,CAAC,CAAC;QAC/C;QACA,OAAON,OAAO;MAChB,CAAC,MAAM,IAAIZ,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACkB,SAAS,EAAE;QAC3C,OAAOd,QAAQ,CAACe,cAAc,CAACrB,IAAI,CAACsB,SAAS,CAAC;MAChD;MACA,OAAOtB,IAAI;IACb,CAAC;IAED,MAAMuB,OAAO,GAAGxB,aAAa,CAACF,MAAM,CAAC2B,eAAe,CAAC;IACrD,OAAOD,OAAO,CAACE,SAAS;EAC1B,CAAC;;EAED;EACA,MAAMC,cAAc,GAAGhC,iBAAiB,CAACD,SAAS,CAAC;EAEnD,oBACEH,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBzC,OAAA;MAAK0C,uBAAuB,EAAE;QAAEC,MAAM,EAAEP;MAAe;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAACG,EAAA,GAjDI3C,qBAAqB;AAmD3B,eAAeA,qBAAqB;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}