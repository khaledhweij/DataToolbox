{"ast":null,"code":"var _jsxFileName = \"/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/components/InputContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Buttons from \"./Button\";\nimport OutputResult from \"./OutputResult\";\nimport \"./styles.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction inputContent() {\n  _s();\n  const [firstContent, setFirstContent] = useState(\"\");\n  const [secondContent, setSecondContent] = useState(\"\");\n  const [output, setOutput] = useState(\"\"); // State to store the output\n\n  // Function to auto-resize textarea\n  const handleResize = e => {\n    e.target.style.height = \"auto\"; // Reset height to auto to shrink if needed\n    e.target.style.height = `${e.target.scrollHeight}px`; // Set height to scrollHeight\n  };\n  const compareContents = async () => {\n    const response = await fetch(\"http://localhost:8080/diffFormatter/compare\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        firstContent: firstContent,\n        secondContent: secondContent\n      })\n    });\n  };\n\n  // Handle comparison logic\n  const handleCompare = () => {\n    // Example comparison logic (to be replaced with actual logic)\n    if (firstContent === secondContent) {\n      setOutput(\"The contents are identical.\");\n    } else {\n      compareContents(\"/diffFormatter/compare\"); // Call JSON comparison\n    }\n    // In a real scenario, you would call your backend API here and set the response to output\n  };\n\n  // Handle clear logic\n  const handleClear = () => {\n    setFirstContent(\"\");\n    setSecondContent(\"\");\n    setOutput(\"\"); // Clear the output as well\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"first-content\",\n          children: \"First Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"first-content\",\n          value: firstContent,\n          onChange: e => {\n            setFirstContent(e.target.value);\n            handleResize(e);\n          },\n          placeholder: \"Enter first content\",\n          style: {\n            overflow: \"hidden\"\n          } // Prevent the scrollbar for resizing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"second-content\",\n          children: \"Second Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"second-content\",\n          value: secondContent,\n          onChange: e => {\n            setSecondContent(e.target.value);\n            handleResize(e);\n          },\n          placeholder: \"Enter second content\",\n          style: {\n            overflow: \"hidden\"\n          } // Prevent the scrollbar for resizing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      onCompare: handleCompare,\n      onClear: handleClear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(OutputResult, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(inputContent, \"RDsQFhPa/WLTuvOy3LeaGMmZBWA=\");\nexport default inputContent;","map":{"version":3,"names":["React","useState","Buttons","OutputResult","jsxDEV","_jsxDEV","inputContent","_s","firstContent","setFirstContent","secondContent","setSecondContent","output","setOutput","handleResize","e","target","style","height","scrollHeight","compareContents","response","fetch","method","headers","body","JSON","stringify","handleCompare","handleClear","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","placeholder","overflow","onCompare","onClear"],"sources":["/home/khweij/Documents/DiffFormatter/DiffFormatterReact/src/components/InputContent.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Buttons from \"./Button\";\nimport OutputResult from \"./OutputResult\";\nimport \"./styles.css\"; // Import the CSS file for styling\n\nfunction inputContent() {\n  const [firstContent, setFirstContent] = useState(\"\");\n  const [secondContent, setSecondContent] = useState(\"\");\n  const [output, setOutput] = useState(\"\"); // State to store the output\n\n  // Function to auto-resize textarea\n  const handleResize = (e) => {\n    e.target.style.height = \"auto\"; // Reset height to auto to shrink if needed\n    e.target.style.height = `${e.target.scrollHeight}px`; // Set height to scrollHeight\n  };\n\n  const compareContents = async () => {\n    const response = await fetch(\n      \"http://localhost:8080/diffFormatter/compare\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          firstContent: firstContent,\n          secondContent: secondContent,\n        }),\n      }\n    );\n  };\n\n  // Handle comparison logic\n  const handleCompare = () => {\n    // Example comparison logic (to be replaced with actual logic)\n    if (firstContent === secondContent) {\n      setOutput(\"The contents are identical.\");\n    } else {\n      compareContents(\"/diffFormatter/compare\"); // Call JSON comparison\n    }\n    // In a real scenario, you would call your backend API here and set the response to output\n  };\n\n  // Handle clear logic\n  const handleClear = () => {\n    setFirstContent(\"\");\n    setSecondContent(\"\");\n    setOutput(\"\"); // Clear the output as well\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"input-group\">\n        <div className=\"input-container\">\n          <label htmlFor=\"first-content\">First Content</label>\n          <textarea\n            id=\"first-content\"\n            value={firstContent}\n            onChange={(e) => {\n              setFirstContent(e.target.value);\n              handleResize(e);\n            }}\n            placeholder=\"Enter first content\"\n            style={{ overflow: \"hidden\" }} // Prevent the scrollbar for resizing\n          />\n        </div>\n        <div className=\"input-container\">\n          <label htmlFor=\"second-content\">Second Content</label>\n          <textarea\n            id=\"second-content\"\n            value={secondContent}\n            onChange={(e) => {\n              setSecondContent(e.target.value);\n              handleResize(e);\n            }}\n            placeholder=\"Enter second content\"\n            style={{ overflow: \"hidden\" }} // Prevent the scrollbar for resizing\n          />\n        </div>\n      </div>\n      <Buttons onCompare={handleCompare} onClear={handleClear} />{\" \"}\n      {/* Add buttons here */}\n      <OutputResult output={output} />{\" \"}\n      {/* Use the output field component here */}\n    </div>\n  );\n}\n\nexport default inputContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}